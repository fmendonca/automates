---
- name: Add new NIC to a VM in OpenShift Virtualization and reboot the VM
  hosts: localhost  # This playbook runs locally to interact with the Kubernetes API
  gather_facts: false

  vars:
    api_version: kubevirt.io/v1

  tasks:
    - name: Get current VM definition
      kubernetes.core.k8s_info:
        api_version: "{{ api_version }}"
        kind: VirtualMachine
        namespace: "{{ namespace }}"
        name: "{{ vm_name }}"
      register: vm_info

    - name: Add new NIC to VM definition
      kubernetes.core.k8s:
        state: present
        api_version: "{{ api_version }}"
        kind: VirtualMachine
        namespace: "{{ namespace }}"
        name: "{{ vm_name }}"
        definition:
          spec:
            template:
              spec:
                domain:
                  devices:
                    interfaces:
                      - name: "{{ interface_name }}"
                        model: "{{ interface_model }}"
                        bridge: {}
                networks:
                  - name: "{{ interface_name }}"
                    pod: {}
      when: vm_info.resources[0].spec.template.spec.domain.devices.interfaces is not defined or
            (interface_name not in vm_info.resources[0].spec.template.spec.domain.devices.interfaces | map(attribute='name'))

    - name: Reboot VM to apply NIC changes
      kubernetes.core.k8s:
        state: present
        api_version: "{{ api_version }}"
        kind: VirtualMachine
        namespace: "{{ namespace }}"
        name: "{{ vm_name }}"
        definition:
          spec:
            running: false
      register: vm_shutdown

    - name: Wait for VM to shutdown
      kubernetes.core.k8s_info:
        api_version: "{{ api_version }}"
        kind: VirtualMachineInstance
        namespace: "{{ namespace }}"
        name: "{{ vm_name }}"
      register: vm_state
      until: vm_state.resources | length == 0
      retries: 30
      delay: 10

    - name: Start VM after shutdown
      kubernetes.core.k8s:
        state: present
        api_version: "{{ api_version }}"
        kind: VirtualMachine
        namespace: "{{ namespace }}"
        name: "{{ vm_name }}"
        definition:
          spec:
            running: true

    - name: Output NIC addition and reboot result
      ansible.builtin.debug:
        msg: "New NIC connected to the Pod network, named '{{ interface_name }}', has been added to the VM '{{ vm_name }}' and the VM was successfully rebooted."
